#ifndef _DEFINE_H
#define _DEFINE_H



// C++ libraries
#include <string>
#include <cstdlib>
#include <iostream>
#include <sstream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <list>
#include <string>
#include <cmath>
#include <limits>
#include <iomanip>
#include <iterator>
#include <bitset>
#include <stack>
#include <queue>
#include <ctime>
#include <cctype>

// C libraries
// #include <time.h>
#include <sys/stat.h>
#include <sys/types.h>
// #include <windows.h>

// Boost libraries
#include <boost/unordered_map.hpp>
#include <boost/array.hpp>
#include <boost/functional/hash/extensions.hpp> // check whether it is needed

// Google sparse hash
#include <google/sparse_hash_map>

// OpenMP libraries
// #include <omp.h>




// definitions
#define HEX_UC(x)                  std::setw(2) << std::setfill('0') << std::hex << (int)(x)
#define VERSION                    "0.12"
#define DATE                       "Nov. 23, 2013"
#define NUM_LINE_FASTQ             4
#define FASTQ_CHECK                1
#define NUM_LINE_FASTA             2
#define FASTA_CHECK                1
#define READ_LENGTH_CHECK          2
#define BITS_PER_CHAR              8
#define BITS_PER_U_SHORT           16
#define BITS_PER_NT                4
#define BIT_VECTOR_MAX_COUNT       255
#define NUM_NEOCLEOTIDE            4
#define A                          0
#define C                          1
#define G                          2
#define T                          3
#define N                          100
#define W                          200
#define S                          300
#define L                          4
#define MIN_KMER_LENGTH            3
#define ZERO                       0
#define BIT1                       1
#define BIT8                       128
#define BPS_PER_BYTE               4
#define MAX_NUM_UNSIGNED_CHAR      255
#define KEY_TYPE                   boost::array<char, MAX_BOOST_ARRAY_SIZE>
#define NUM_PARTITIONS_FOR_COUNT   100
#define HISTOGRAM_SIZE             10001
#define DEFAULT_FPR                0.001
#define PHRED33                    33
#define PHRED64                    64
#define MIN_64_SCORE               59
#define MIN_SCORE                  33
#define MIN_NON_SOLID_LENGTH       2
#define MIN_SOLID_LENGTH           2
#define INIT_MIN_QS                1000000
#define MIN_QS_DIFF                10
#define MAX_EXTENSION              5
#define QS_CUTOFF                  10
#define MAX_LOW_QS_BASES           3
#define FP_SUSPECT_LENGTH          1
#define SOLID_REGION_ADJUST_RANGE  4
#define SUBST_CHAR                 'A'
#define MAX_ERROR_RATE             0.25

#ifndef MAX_BOOST_ARRAY_SIZE
#define MAX_BOOST_ARRAY_SIZE       20
#endif

#ifdef _WIN32
namespace std {
   template<> struct hash<KEY_TYPE> {
      size_t operator()(const KEY_TYPE& a) const {
         return boost::hash_range(a.begin(), a.end());
      }
   };
}
#else
namespace std {
   namespace tr1 {
      template<> struct hash<KEY_TYPE> {
         size_t operator()(const KEY_TYPE& a) const {
            return boost::hash_range(a.begin(), a.end());
         }
      };
   }
}
#endif

static const char NEOCLEOTIDE[NUM_NEOCLEOTIDE] = {'A', 'C', 'G', 'T'};

// normal Bloom filter
static const unsigned char BIT_MASK[BITS_PER_CHAR] = {
                                                      0x01, //00000001
                                                      0x02, //00000010
                                                      0x04, //00000100
                                                      0x08, //00001000
                                                      0x10, //00010000
                                                      0x20, //00100000
                                                      0x40, //01000000
                                                      0x80  //10000000
                                                     };



typedef unsigned long long int bloom_type;
const unsigned int PREDEF_NUM_HASH_FUNC = 128;
static const bloom_type PREDEF_HASH_FUNC[PREDEF_NUM_HASH_FUNC] = {
                                                                    0xAAAAAAAAAAAAAAAAULL, 0x5555555555555555ULL, 0x3333333333333333ULL, 0xCCCCCCCCCCCCCCCCULL,
                                                                    0x6666666666666666ULL, 0x9999999999999999ULL, 0xB5B5B5B5B5B5B5B5ULL, 0x4B4B4B4B4B4B4B4BULL,
                                                                    0xAA55AA55AA55AA55ULL, 0x5533553355335533ULL, 0x33CC33CC33CC33CCULL, 0xCC66CC66CC66CC66ULL,
                                                                    0x6699669966996699ULL, 0x99B599B599B599B5ULL, 0xB54BB54BB54BB54BULL, 0x4BAA4BAA4BAA4BAAULL,
                                                                    0xAA33AA33AA33AA33ULL, 0x55CC55CC55CC55CCULL, 0x3366336633663366ULL, 0xCC99CC99CC99CC99ULL,
                                                                    0x66B566B566B566B5ULL, 0x994B994B994B994BULL, 0xB5AAB5AAB5AAB5AAULL, 0xAAAAAA33AAAAAA33ULL,
                                                                    0x555555CC555555CCULL, 0x3333336633333366ULL, 0xCCCCCC99CCCCCC99ULL, 0x666666B5666666B5ULL,
                                                                    0x9999994B9999994BULL, 0xB5B5B5AAB5B5B5AAULL, 0xFFFFFFFFFFFFFFFFULL, 0xFFFF0000FFFF0000ULL,
                                                                    0xB823D5EBB823D5EBULL, 0xC1191CDFC1191CDFULL, 0xF623AEB3F623AEB3ULL, 0xDB58499FDB58499FULL,
                                                                    0xC8D42E70C8D42E70ULL, 0xB173F616B173F616ULL, 0xA91A5967A91A5967ULL, 0xDA427D63DA427D63ULL,
                                                                    0xB1E8A2EAB1E8A2EAULL, 0xF6C0D155F6C0D155ULL, 0x4909FEA34909FEA3ULL, 0xA68CC6A7A68CC6A7ULL,
                                                                    0xC395E782C395E782ULL, 0xA26057EBA26057EBULL, 0x0CD5DA280CD5DA28ULL, 0x467C5492467C5492ULL,
                                                                    0xF15E6982F15E6982ULL, 0x61C6FAD361C6FAD3ULL, 0x9615E3529615E352ULL, 0x6E9E355A6E9E355AULL,
                                                                    0x689B563E689B563EULL, 0x0C9831A80C9831A8ULL, 0x6753C18B6753C18BULL, 0xA622689BA622689BULL,
                                                                    0x8CA63C478CA63C47ULL, 0x42CC288442CC2884ULL, 0x8E89919B8E89919BULL, 0x6EDBD7D36EDBD7D3ULL,
                                                                    0x15B6796C15B6796CULL, 0x1D6FDFE41D6FDFE4ULL, 0x63FF909263FF9092ULL, 0xE7401432E7401432ULL,
                                                                    0xEFFE9412EFFE9412ULL, 0xAEAEDF79AEAEDF79ULL, 0x9F245A319F245A31ULL, 0x83C136FC83C136FCULL,
                                                                    0xC3DA4A8CC3DA4A8CULL, 0xA5112C8CA5112C8CULL, 0x5271F4915271F491ULL, 0x9A948DAB9A948DABULL,
                                                                    0xCEE59A8DCEE59A8DULL, 0xB5F525ABB5F525ABULL, 0x59D1321759D13217ULL, 0x24E7C33124E7C331ULL,
                                                                    0x697C2103697C2103ULL, 0x84B0A46084B0A460ULL, 0x86156DA986156DA9ULL, 0xAEF2AC68AEF2AC68ULL,
                                                                    0x23243DA523243DA5ULL, 0x3F6496433F649643ULL, 0x5FA495A85FA495A8ULL, 0x67710DF867710DF8ULL,
                                                                    0x9A6C499E9A6C499EULL, 0xDCFB0227DCFB0227ULL, 0x46A4343346A43433ULL, 0x1832B07A1832B07AULL,
                                                                    0xC46AFF3CC46AFF3CULL, 0xB9C8FFF0B9C8FFF0ULL, 0xC9500467C9500467ULL, 0x34431BDF34431BDFULL,
                                                                    0xB652432BB652432BULL, 0xE367F12BE367F12BULL, 0x427F4C1B427F4C1BULL, 0x224C006E224C006EULL,
                                                                    0x2E7E5A892E7E5A89ULL, 0x96F99AA596F99AA5ULL, 0x0BEB452A0BEB452AULL, 0x2FD87C392FD87C39ULL,
                                                                    0x74B2E1FB74B2E1FBULL, 0x222EFD24222EFD24ULL, 0xF357F60CF357F60CULL, 0x440FCB1E440FCB1EULL,
                                                                    0x8BBE030F8BBE030FULL, 0x6704DC296704DC29ULL, 0x1144D12F1144D12FULL, 0x948B1355948B1355ULL,
                                                                    0x6D8FD7E96D8FD7E9ULL, 0x1C11A0141C11A014ULL, 0xADD1592FADD1592FULL, 0xFB3C712EFB3C712EULL,
                                                                    0xFC77642FFC77642FULL, 0xF9C4CE8CF9C4CE8CULL, 0x31312FB931312FB9ULL, 0x08B0DD7908B0DD79ULL,
                                                                    0x318FA6E7318FA6E7ULL, 0xC040D23DC040D23DULL, 0xC0589AA7C0589AA7ULL, 0x0CA5C0750CA5C075ULL,
                                                                    0xF874B172F874B172ULL, 0x0CF914D50CF914D5ULL, 0x784D3280784D3280ULL, 0x4E8CFEBC4E8CFEBCULL,
                                                                    0xC569F575C569F575ULL, 0xCDB2A091CDB2A091ULL, 0x2CC016B42CC016B4ULL, 0x5C5F44215C5F4421ULL
                                                                 };

// counting Bloom filter
static const unsigned char PROGRAM_MASK_4_PER_BYTE[4][256] = {
   // MSB ______XX LSB
   {
		0x01, 0x02, 0x03, 0x03, 0x05, 0x06, 0x07, 0x07, 0x09, 0x0a, 0x0b, 0x0b, 0x0d, 0x0e, 0x0f, 0x0f,
		0x11, 0x12, 0x13, 0x13, 0x15, 0x16, 0x17, 0x17, 0x19, 0x1a, 0x1b, 0x1b, 0x1d, 0x1e, 0x1f, 0x1f,
		0x21, 0x22, 0x23, 0x23, 0x25, 0x26, 0x27, 0x27, 0x29, 0x2a, 0x2b, 0x2b, 0x2d, 0x2e, 0x2f, 0x2f,
		0x31, 0x32, 0x33, 0x33, 0x35, 0x36, 0x37, 0x37, 0x39, 0x3a, 0x3b, 0x3b, 0x3d, 0x3e, 0x3f, 0x3f,
		0x41, 0x42, 0x43, 0x43, 0x45, 0x46, 0x47, 0x47, 0x49, 0x4a, 0x4b, 0x4b, 0x4d, 0x4e, 0x4f, 0x4f,
		0x51, 0x52, 0x53, 0x53, 0x55, 0x56, 0x57, 0x57, 0x59, 0x5a, 0x5b, 0x5b, 0x5d, 0x5e, 0x5f, 0x5f,
		0x61, 0x62, 0x63, 0x63, 0x65, 0x66, 0x67, 0x67, 0x69, 0x6a, 0x6b, 0x6b, 0x6d, 0x6e, 0x6f, 0x6f,
		0x71, 0x72, 0x73, 0x73, 0x75, 0x76, 0x77, 0x77, 0x79, 0x7a, 0x7b, 0x7b, 0x7d, 0x7e, 0x7f, 0x7f,
		0x81, 0x82, 0x83, 0x83, 0x85, 0x86, 0x87, 0x87, 0x89, 0x8a, 0x8b, 0x8b, 0x8d, 0x8e, 0x8f, 0x8f,
		0x91, 0x92, 0x93, 0x93, 0x95, 0x96, 0x97, 0x97, 0x99, 0x9a, 0x9b, 0x9b, 0x9d, 0x9e, 0x9f, 0x9f,
		0xa1, 0xa2, 0xa3, 0xa3, 0xa5, 0xa6, 0xa7, 0xa7, 0xa9, 0xaa, 0xab, 0xab, 0xad, 0xae, 0xaf, 0xaf,
		0xb1, 0xb2, 0xb3, 0xb3, 0xb5, 0xb6, 0xb7, 0xb7, 0xb9, 0xba, 0xbb, 0xbb, 0xbd, 0xbe, 0xbf, 0xbf,
		0xc1, 0xc2, 0xc3, 0xc3, 0xc5, 0xc6, 0xc7, 0xc7, 0xc9, 0xca, 0xcb, 0xcb, 0xcd, 0xce, 0xcf, 0xcf,
		0xd1, 0xd2, 0xd3, 0xd3, 0xd5, 0xd6, 0xd7, 0xd7, 0xd9, 0xda, 0xdb, 0xdb, 0xdd, 0xde, 0xdf, 0xdf,
		0xe1, 0xe2, 0xe3, 0xe3, 0xe5, 0xe6, 0xe7, 0xe7, 0xe9, 0xea, 0xeb, 0xeb, 0xed, 0xee, 0xef, 0xef,
		0xf1, 0xf2, 0xf3, 0xf3, 0xf5, 0xf6, 0xf7, 0xf7, 0xf9, 0xfa, 0xfb, 0xfb, 0xfd, 0xfe, 0xff, 0xff
   },

   // MSB ____XX__ LSB
   {
      0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c,0x0d, 0x0e, 0x0f, 0x0c, 0x0d, 0x0e, 0x0f,
      0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c,0x1d, 0x1e, 0x1f, 0x1c, 0x1d, 0x1e, 0x1f,
      0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c,0x2d, 0x2e, 0x2f, 0x2c, 0x2d, 0x2e, 0x2f,
      0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c,0x3d, 0x3e, 0x3f, 0x3c, 0x3d, 0x3e, 0x3f,
      0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c,0x4d, 0x4e, 0x4f, 0x4c, 0x4d, 0x4e, 0x4f,
      0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c,0x5d, 0x5e, 0x5f, 0x5c, 0x5d, 0x5e, 0x5f,
      0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c,0x6d, 0x6e, 0x6f, 0x6c, 0x6d, 0x6e, 0x6f,
      0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c,0x7d, 0x7e, 0x7f, 0x7c, 0x7d, 0x7e, 0x7f,
      0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c,0x8d, 0x8e, 0x8f, 0x8c, 0x8d, 0x8e, 0x8f,
      0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c,0x9d, 0x9e, 0x9f, 0x9c, 0x9d, 0x9e, 0x9f,
      0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac,0xad, 0xae, 0xaf, 0xac, 0xad, 0xae, 0xaf,
      0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc,0xbd, 0xbe, 0xbf, 0xbc, 0xbd, 0xbe, 0xbf,
      0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc,0xcd, 0xce, 0xcf, 0xcc, 0xcd, 0xce, 0xcf,
      0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc,0xdd, 0xde, 0xdf, 0xdc, 0xdd, 0xde, 0xdf,
      0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec,0xed, 0xee, 0xef, 0xec, 0xed, 0xee, 0xef,
      0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc,0xfd, 0xfe, 0xff, 0xfc, 0xfd, 0xfe, 0xff
   },

   // MSB __XX____ LSB
   {
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c,0x1d, 0x1e, 0x1f,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c,0x2d, 0x2e, 0x2f,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c,0x3d, 0x3e, 0x3f,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c,0x3d, 0x3e, 0x3f,
		0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c,0x5d, 0x5e, 0x5f,
		0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c,0x6d, 0x6e, 0x6f,
		0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c,0x7d, 0x7e, 0x7f,
		0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c,0x7d, 0x7e, 0x7f,
		0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c,0x9d, 0x9e, 0x9f,
		0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac,0xad, 0xae, 0xaf,
		0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc,0xbd, 0xbe, 0xbf,
		0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc,0xbd, 0xbe, 0xbf,
		0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc,0xdd, 0xde, 0xdf,
		0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec,0xed, 0xee, 0xef,
		0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc,0xfd, 0xfe, 0xff,
		0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc,0xfd, 0xfe, 0xff
   },

   // MSB XX______ LSB
   {
		0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
		0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
		0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
		0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
		0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
		0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
		0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
		0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
		0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
		0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
		0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
		0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
		0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
		0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
		0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
		0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
   }
};

static const unsigned char PROGRAM_MASK_2_PER_BYTE[2][256] = {
   // MSB ____XXXX LSB
   {
      0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x0f,
      0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x1f,
      0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x2f,
      0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x3f,
      0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x4f,
      0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x5f,
      0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x6f,
      0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x7f,
      0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x8f,
      0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0x9f,
      0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xaf,
      0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xbf,
      0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xcf,
      0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xdf,
      0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xef,
      0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0xff
   },

   // MSB XXXX____ LSB
   {
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
		0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
		0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
		0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
		0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
		0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
		0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
		0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
		0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
		0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
		0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
		0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
		0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
		0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
   }
};

static const unsigned char PROGRAM_MASK_1_PER_BYTE[1][256] = {
   {
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
		0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
		0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30,
		0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40,
		0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50,
		0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60,
		0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70,
		0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80,
		0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90,
		0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0,
		0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0,
		0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0,
		0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0,
		0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0,
		0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0,
		0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0xff

   }
};



#endif
